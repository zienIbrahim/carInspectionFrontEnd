/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { LoginRequest } from '../models/login-request';
import { RefreshTokenRequest } from '../models/refresh-token-request';
import { environment } from 'src/environments/environment';
import { LoginPath, RefreshTokenPath } from './apiRoutPath';
import { BehaviorSubject, map, tap } from 'rxjs';
import { JwtHelperService } from '@auth0/angular-jwt';
import { Router } from '@angular/router';
import { jwtDecode } from 'jwt-decode';
import { AccessToken } from '../models/AccessToken.';
import { UserRoles } from '../../data/UserRole';

@Injectable({ providedIn: 'root' })
export class AuthenticationService {
  apiUrl = environment.apiUrl;
  isLoggedIn = new BehaviorSubject<boolean>(this.isTokenAvailable());
  jwtHelper = new JwtHelperService();

  constructor(private router: Router,private http: HttpClient) {
  }
  Login(model: LoginRequest) {
    return this.http.post(this.apiUrl + LoginPath, model).pipe(
      tap((res: any) => {
        if (res.accsesToken) {
          localStorage.setItem('token:jwt', res.accsesToken);
          localStorage.setItem('token:refreshToken', res.refreshToken);
          console.log(this.getUserRole());
          this.setIsLoggedIn(true);
          this.router.navigate(["/"]);
        }
      })
    );
  }
  RefreshToken() {
    const refreshToken: string = localStorage.getItem('token:refreshToken');
    const accessToken: string = localStorage.getItem('token:jwt');
    if (refreshToken == null || accessToken == null) {
      this.logout().then(() => this.router.navigate(['auth/login']));
    }
    const tokenModel = { refreshToken: refreshToken, token: accessToken };
    return this.http.post(this.apiUrl + RefreshTokenPath, tokenModel).pipe(
      map((res: any) => {
        localStorage.setItem('token:jwt', res.accsesToken);
        localStorage.setItem('token:refreshToken', res.refreshToken);
        return res;
      }));
  }
  private setIsLoggedIn(isLoggedIn: boolean): void {
    this.isLoggedIn.next(isLoggedIn);
  }
  private isTokenAvailable(): boolean {
    return !!localStorage.getItem('token:jwt');
  }
  isTokenExpired(): boolean {
    const expiryTime: number = Number(this.getExpiryTime());
    if (expiryTime) {
      return ((1000 * expiryTime) - (new Date()).getTime()) < 5000;
    } else {
      return false;
    }
  }
  private getExpiryTime() {
    return this.isTokenAvailable() ? this.getDecodedToken().exp : null;
  }
  getDecodedToken(): AccessToken | null {
    const token = localStorage.getItem('token:jwt');
    if (!token) {
      console.warn('No token found in localStorage.');
      return null;
    }
    try {
      return this.jwtHelper.decodeToken(token) as AccessToken;
    }
    catch (error) 
    {
      console.error('Error decoding token:', error);
      return null;
    }
  }
  getIsLoggedIn(): BehaviorSubject<boolean> {
    if (this.isLoggedIn && this.isTokenAvailable()){
     return new BehaviorSubject<boolean>(true) 
    }
    else
    {
     return new BehaviorSubject<boolean>(false) 
    }
  }
 get getAuthToken(){   

  return String(localStorage.getItem('token:jwt'));
 }
 async logout(): Promise<any> {
    // Clear JWT from localstorage
    localStorage.removeItem('token:refreshToken');
    localStorage.removeItem('token:jwt');
    // Update logged in status
    this.setIsLoggedIn(false);
    // Navigate user back to login page
    await this.router.navigate(['auth/login']);
 }
 getUserRole(): string[] {
    const tokenData = this.getDecodedToken();
    if (!tokenData) return [];
  
    const roles = tokenData["http://schemas.microsoft.com/ws/2008/06/identity/claims/role"];
    
    // Ensure roles are always returned as an array
    return Array.isArray(roles) ? roles : [roles];
 }
 UserInRole(role: string): boolean {
  const roles = this.getUserRole();
   return roles.includes(role) || roles.includes(UserRoles.Admin); 
 }
 checkUserInRoleInNav(requiredRoles: string[]): boolean {
  if (!requiredRoles || requiredRoles.length === 0) return true; // No role restriction
  const userRoles = this.getUserRole(); // Ensure this returns an array
  return requiredRoles.some(role => userRoles.includes(role));
 }
 getTecknicalId() {
  const tokenData = this.getDecodedToken();
  if (!tokenData) return null;
  const userdata = tokenData["http://schemas.microsoft.com/ws/2008/06/identity/claims/userdata"][0] as string;
  return userdata;
 }
 getUserCategoryId() {
  return this.getDecodedToken().CategoryId;
 }
}


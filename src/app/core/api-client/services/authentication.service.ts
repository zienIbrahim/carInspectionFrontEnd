/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { LoginRequest } from '../models/login-request';
import { RefreshTokenRequest } from '../models/refresh-token-request';
import { environment } from 'src/environments/environment';
import { LoginPath, RefreshTokenPath } from './apiRoutPath';
import { BehaviorSubject, tap } from 'rxjs';
import { JwtHelperService } from '@auth0/angular-jwt';
import { Router } from '@angular/router';

@Injectable({ providedIn: 'root' })
export class AuthenticationService {
  apiUrl = environment.apiUrl;
  isLoggedIn = new BehaviorSubject<boolean>(this.isTokenAvailable());
  jwtHelper = new JwtHelperService();

  constructor(private router: Router,private http: HttpClient) {
  }
  Login(model: LoginRequest) {
    return this.http.post(this.apiUrl + LoginPath, model).pipe(
      tap((res: any) => {
        if (res.accsesToken) {
          localStorage.setItem('token:jwt', res.accsesToken);
          localStorage.setItem('token:refreshToken', res.refreshToken);
          this.setIsLoggedIn(true);
          this.router.navigate(["/"]);
        }
      })
    );
  }
  RefreshToken(model: RefreshTokenRequest) {
    return this.http.post(this.apiUrl + RefreshTokenPath, model);
  }
  private setIsLoggedIn(isLoggedIn: boolean): void {
    this.isLoggedIn.next(isLoggedIn);
  }
  private isTokenAvailable(): boolean {
    return !!localStorage.getItem('token:jwt');
  }
  private isTokenExpired(): boolean {
    const token = String(localStorage.getItem('token:jwt'));

    const expiryTime: number = Number(this.getExpiryTime());
    if (expiryTime) {
      return ((1000 * expiryTime) - (new Date()).getTime()) < 5000;
    } else {
      return false;
    }
  }
  private getExpiryTime() {
    return this.isTokenAvailable() ? this.getDecodedToken().exp : null;
  }
  public getDecodedToken() {
    const token = String(localStorage.getItem('token:jwt'));
    return this.jwtHelper.decodeToken(token);
  }
 get getAuthToken(){   

  return String(localStorage.getItem('token:jwt'));
 }
  async logout(): Promise<any> {
    // Clear JWT from localstorage
    localStorage.removeItem('token:refreshToken');
    localStorage.removeItem('token:jwt');
    // Update logged in status
    this.setIsLoggedIn(false);
    // Navigate user back to login page
    await this.router.navigate(['auth/login']);
  }
}

